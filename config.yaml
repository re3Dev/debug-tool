# There is a built-in micro proxy that will host the webui and REST API all on
# one port (this is called the "Single HTTP Frontend") and means you just need
# one open port in the container/firewalls/etc.
#
# Listen on all addresses available, port 1337
listenAddressSingleHTTPFrontend: 0.0.0.0:1337

# Choose from INFO (default), WARN and DEBUG
logLevel: "INFO"

# Checking for updates https://docs.olivetin.app/update-checks.html
checkForUpdates: false

showFooter: false

themeName: dark-mode
pageTitle: re:3D
sectionNavigationStyle: topbar

# Actions are commands that are executed by OliveTin, and normally show up as
# buttons on the WebUI.
#
# Docs: https://docs.olivetin.app/create-your-first-action.html
actions:
  # This is the most simple action, it just runs the command and flashes the
  # button to indicate status.
  #
  # If you are running OliveTin in a container remember to pass through the
  # docker socket! https://docs.olivetin.app/action-container-control.html
  - title: Ping the Internet
    shell: ping -c 3 1.1.1.1
    icon: <iconify-icon icon="material-symbols:wifi" width="48" height="48"></iconify-icon>
    popupOnStart: execution-dialog-stdout-only

  # MY COMMAND (Grabs the klippy log from the printer)
  - title: Grab Logs
    shell: /home/pi/saved_scripts/save_log.sh
    icon: <iconify-icon icon="icon-park-outline:log" width="48" height="48"></iconify-icon>
    popupOnStart: default

  # This uses `popupOnStart: execution-dialog-stdout-only` to simply show just
  # the command output.
  - title: Interface Pop-up
    icon: <iconify-icon icon="uil:rss-interface" width="48" height="48"></iconify-icon>
    shell: su - pi -c "chromium-browser --no-sandbox --kiosk --zoom=100 file:///home/pi/interface.html"
    popupOnStart: default

  # This uses `popupOnStart: execution-dialog` to show a dialog with more
  # information about the command that was run.
  - title: Keyboard Connect
    shell: /home/pi/saved_scripts/btconnect.sh
    icon: <iconify-icon icon="material-symbols:bluetooth" width="48" height="48"></iconify-icon>
    timeout: 15
    popupOnStart: default

  # This uses `popupOnStart: execution-button` to display a mini button that
  # links to the logs.
  - title: Help
    shell: su - pi -c "chromium-browser --no-sandbox --kiosk --zoom=100 file:///home/pi/help.html"
    icon: <iconify-icon icon="material-symbols:help" width="48" height="48"></iconify-icon>
    popupOnStart: default

  # You are not limited to operating system commands, and of course you can run
  # your own scripts. Here `maxConcurrent` stops the script running multiple
  # times in parallel. There is also a timeout that will kill the command if it
  # runs for too long.
  - title: Generate Load Graph
    icon: <iconify-icon icon="lets-icons:img-load-box-fill" width="48" height="48"></iconify-icon>
    timeout: 20
    shell: /home/pi/klipper/scripts/graphstats.py /home/pi/saved_logs/{{ Log }} {{ Type }} -o /home/pi/graph.png
    popupOnStart: default
    trigger: Display Last Loadgraph
    arguments:
      - name: Log
        entity: log
        choices:
          - value: "{{ log.Name }}"
            title: "{{ log.Name }}"
      - name: Type
        choices:
          - title: mcu bandwidth & load utilization
            value: ""
          - title: mcu frequency
            value: "-f"
          - title: system load
            value: "-s"
          - title: heater temperature
            value: "-t HEATER"

  - title: Display Last Loadgraph
    shell: su - pi -c "chromium-browser --no-sandbox --kiosk --zoom=100 file:///home/pi/graph_display.html"
    icon: <iconify-icon icon="mdi:graph-line" width="48" height="48"></iconify-icon>
    popupOnStart: default

  # Displays what and where errors were found in a file
  - title: Display Errors in Log
    shell: python /home/pi/saved_scripts/parse_log.py /home/pi/saved_logs/{{ Log }}
    icon: <iconify-icon icon="bxs:error" width="48" height="48"></iconify-icon>
    timeout: 20
    popupOnStart: execution-dialog-stdout-only
    arguments:
      - name: Log
        entity: log
        choices:
          - value: "{{ log.Name }}"
            title: "{{ log.Name }}"

  - title: Display Extruder Temps
    shell: python /home/pi/saved_scripts/parse_extruders.py /home/pi/saved_logs/{{ Log }}
    icon: <iconify-icon icon="fluent:temperature-24-filled" width="48" height="48"></iconify-icon>
    timeout: 20
    popupOnStart: execution-dialog-stdout-only
    arguments:
      - name: Log
        entity: log
        choices:
          - value: "{{ log.Name }}"
            title: "{{ log.Name }}"

  # The following actions are "dummy" actions, used in a Dashboard. As long as
  # you have these referenced in a dashboard, they will not show up in the
  # `actions` view.
  - title: Set {{ temps.name }} Temp
    shell: python /home/pi/saved_scripts/set_temp.py {{ temps.name }} {{ Temperature }}
    entity: temps
    icon: <iconify-icon icon="carbon:temperature-inversion" width="48" height="48"></iconify-icon>
    popupOnStart: execution-dialog-stdout-only
    arguments:
      - name: Temperature
        type: int
  
  - title: Cooldown {{ temps.name }}
    shell: python /home/pi/saved_scripts/set_temp.py {{ temps.name }} 0
    popupOnStart: execution-dialog-stdout-only
    entity: temps
    icon: <iconify-icon icon="mdi:snowflake" width="48" height="48"></iconify-icon>
  
  - title: Refresh Data
    shell: python /home/pi/saved_scripts/printer_data.py
    icon: <iconify-icon icon="solar:refresh-bold" width="48" height="48"></iconify-icon>
    


  - title: Start {{ container.Names }}
    icon: box
    shell: docker start {{ container.Names }}
    entity: container
    trigger: Update container entity file

  - title: Stop {{ container.Names }}
    icon: box
    shell: docker stop {{ container.Names }}
    entity: container
    trigger: Update container entity file

  # Lastly, you can hide actions from the web UI, this is useful for creating
  # background helpers that execute only on startup or a cron, for updating
  # entity files.

  # - title: Update container entity file
  #   shell: 'docker ps -a --format json > /etc/OliveTin/entities/containers.json'
  #   hidden: true
  #   execOnStartup: true
  #   execOnCron: '*/1 * * * *'

# An entity is something that exists - a "thing", like a VM, or a Container
# is an entity. OliveTin allows you to then dynamically generate actions based
# around these entities.
#
# This is really useful if you want to generate wake on lan or poweroff actions
# for `server` entities, for example.
#
# A very popular use case that entities were designed for was for `container`
# entities - in a similar way you could generate `start`, `stop`, and `restart`
# container actions.
#
# Entities are just loaded fome files on disk, OliveTin will also watch these
# files for updates while OliveTin is running, and update entities.
#
# Entities can have properties defined in those files, and those can be used
# in your configuration as variables. For example; `container.status`,
# or `vm.hostname`.
#
# Docs: http://docs.olivetin.app/entities.html
entities:
  # YAML files are the default expected format, so you can use .yml or .yaml,
  # or even .txt, as long as the file contains valid a valid yaml LIST, then it
  # will load properly.
  #
  # Docs: https://docs.olivetin.app/entities.html
  - file: entities/servers.yaml
    name: server

  - file: entities/containers.json
    name: container

  - file: /etc/OliveTin/entities/logs.json
    name: log
  
  - file: /etc/OliveTin/entities/system_data.json
    name: system
  
  - file: /etc/OliveTin/entities/printer_temps.json
    name: temps

# Dashboards are a way of taking actions from the default "actions" view, and
# organizing them into groups - either into folders, or fieldsets.
#
# The only way to properly use entities, are to use them with a `fieldset` on
# a dashboard.
dashboards:
  # Top level items are dashboards.
  - title: Heater Control
    contents:
      - title: "Printer Data"
        entity: system
        type: fieldset
        contents:
          - type: display
            title: |
             <strong>{{ system.printer.hostname }}</strong> MAC: {{ system.system.mac_address }}
          - title: Refresh Data
      
      - title: "{{ temps.name }}"
        entity: temps
        type: fieldset
        contents:
          - type: display
            title: |
                Current: <strong>{{ temps.current }}</strong>
                Target: <strong>{{ temps.target }}</strong>
          
          - title: Set {{ temps.name }} Temp
          - title: Cooldown {{ temps.name }}

  # This is the second dashboard.
  - title: My Containers
    contents:
      - title: "Container {{ container.Names }} ({{ container.Image }})"
        entity: container
        type: fieldset
        contents:
          - type: display
            title: |
              {{ container.RunningFor }} <br /><br /><strong>{{ container.State }}</strong>

          - title: "Start {{ container.Names }}"
          - title: "Stop {{ container.Names }}"
